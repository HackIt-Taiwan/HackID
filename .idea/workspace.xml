<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="AutoImportSettings">
    <option name="autoReloadType" value="SELECTIVE" />
  </component>
  <component name="ChangeListManager">
    <list default="true" id="6eda8f38-cf15-4728-8ee8-3e4643318a01" name="Changes" comment="feat: add signature upload API and corresponding tests&#10;&#10;- Implemented `upload_signature` function in `sign_upload.py` to handle signature uploads and mark users as signed in.&#10;- Added unit tests to verify that signatures are successfully uploaded and users' signed-in status is updated.">
      <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/app/routes/category_service.py" beforeDir="false" afterPath="$PROJECT_DIR$/app/routes/category_service.py" afterDir="false" />
      <change beforePath="$PROJECT_DIR$/app/routes/sign_upload.py" beforeDir="false" afterPath="$PROJECT_DIR$/app/routes/sign_upload.py" afterDir="false" />
    </list>
    <option name="SHOW_DIALOG" value="false" />
    <option name="HIGHLIGHT_CONFLICTS" value="true" />
    <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
    <option name="LAST_RESOLUTION" value="IGNORE" />
  </component>
  <component name="FileTemplateManagerImpl">
    <option name="RECENT_TEMPLATES">
      <list>
        <option value="Flask Main" />
        <option value="Python Script" />
      </list>
    </option>
  </component>
  <component name="FlaskConsoleOptions" custom-start-script="import sys&#10;sys.path.extend([WORKING_DIR_AND_PYTHON_PATHS])&#10;from flask.cli import ScriptInfo&#10;locals().update(ScriptInfo(create_app=None).load_app().make_shell_context())&#10;print(&quot;Python %s on %s\nApp: %s [%s]\nInstance: %s&quot; % (sys.version, sys.platform, app.import_name, app.env, app.instance_path))">
    <envs>
      <env key="FLASK_APP" value="app" />
    </envs>
    <option name="myCustomStartScript" value="import sys&#10;sys.path.extend([WORKING_DIR_AND_PYTHON_PATHS])&#10;from flask.cli import ScriptInfo&#10;locals().update(ScriptInfo(create_app=None).load_app().make_shell_context())&#10;print(&quot;Python %s on %s\nApp: %s [%s]\nInstance: %s&quot; % (sys.version, sys.platform, app.import_name, app.env, app.instance_path))" />
    <option name="myEnvs">
      <map>
        <entry key="FLASK_APP" value="app" />
      </map>
    </option>
  </component>
  <component name="Git.Settings">
    <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
  </component>
  <component name="ProjectColorInfo"><![CDATA[{
  "associatedIndex": 4
}]]></component>
  <component name="ProjectId" id="2nEBpIetayik823YBcRq2YwfME8" />
  <component name="ProjectLevelVcsManager" settingsEditedManually="true">
    <ConfirmationsSetting value="2" id="Add" />
  </component>
  <component name="ProjectViewState">
    <option name="hideEmptyMiddlePackages" value="true" />
    <option name="showLibraryContents" value="true" />
  </component>
  <component name="PropertiesComponent"><![CDATA[{
  "keyToString": {
    "Python tests.Python tests in test_category_service.py.executor": "Run",
    "Python tests.Python tests in test_checkin.py.executor": "Run",
    "Python tests.Python tests in test_encryption.py.executor": "Run",
    "Python tests.Python tests in test_sign_update.py.executor": "Run",
    "Python tests.Python tests in test_sign_upload.py.executor": "Run",
    "Python.checkin.executor": "Run",
    "Python.sign_upload.executor": "Run",
    "RunOnceActivity.ShowReadmeOnStart": "true",
    "git-widget-placeholder": "master",
    "node.js.detected.package.eslint": "true",
    "node.js.detected.package.tslint": "true",
    "node.js.selected.package.eslint": "(autodetect)",
    "node.js.selected.package.tslint": "(autodetect)",
    "nodejs_package_manager_path": "npm",
    "settings.editor.selected.configurable": "ml.llm.LLMConfigurable",
    "vue.rearranger.settings.migration": "true"
  }
}]]></component>
  <component name="RecentsManager">
    <key name="MoveFile.RECENT_KEYS">
      <recent name="E:\Program\Dev\Counterspell-Staff-Server\Counterspell-Staff-Server\tests\app\utils" />
      <recent name="E:\Program\Dev\Counterspell-Staff-Server\Counterspell-Staff-Server\app\utils" />
      <recent name="E:\Program\Dev\Counterspell-Staff-Server\Counterspell-Staff-Server\app" />
    </key>
  </component>
  <component name="RunManager">
    <configuration name="Counterspell-Staff-Server" type="Python.FlaskServer">
      <module name="Counterspell-Staff-Server" />
      <option name="target" value="$PROJECT_DIR$/app.py" />
      <option name="targetType" value="PATH" />
      <option name="ENV_FILES" value="" />
      <option name="INTERPRETER_OPTIONS" value="" />
      <option name="PARENT_ENVS" value="true" />
      <option name="SDK_HOME" value="" />
      <option name="WORKING_DIRECTORY" value="$PROJECT_DIR$" />
      <option name="IS_MODULE_SDK" value="false" />
      <option name="ADD_CONTENT_ROOTS" value="true" />
      <option name="ADD_SOURCE_ROOTS" value="true" />
      <EXTENSION ID="PythonCoverageRunConfigurationExtension" runner="coverage.py" />
      <option name="launchJavascriptDebuger" value="false" />
      <method v="2" />
    </configuration>
  </component>
  <component name="SharedIndexes">
    <attachedChunks>
      <set>
        <option value="bundled-js-predefined-d6986cc7102b-5c90d61e3bab-JavaScript-PY-242.22855.92" />
        <option value="bundled-python-sdk-b068d85d1acf-399fe30bd8c1-com.jetbrains.pycharm.pro.sharedIndexes.bundled-PY-242.22855.92" />
      </set>
    </attachedChunks>
  </component>
  <component name="SpellCheckerSettings" RuntimeDictionaries="0" Folders="0" CustomDictionaries="0" DefaultDictionary="application-level" UseSingleDictionary="true" transferred="true" />
  <component name="TaskManager">
    <task active="true" id="Default" summary="Default task">
      <changelist id="6eda8f38-cf15-4728-8ee8-3e4643318a01" name="Changes" comment="" />
      <created>1728528535559</created>
      <option name="number" value="Default" />
      <option name="presentableId" value="Default" />
      <updated>1728528535559</updated>
      <workItem from="1728528536806" duration="22545000" />
    </task>
    <task id="LOCAL-00001" summary="feat: initialize project with check-in API and error handling&#10;&#10;- Initialized Flask project structure with basic configuration (app, config, routes).&#10;- Added check-in API with POST request support.&#10;- Implemented error handling for client, server, and database errors with custom error codes.&#10;- Set up MongoDB connection using PyMongo.&#10;- Added unit tests with enhanced feedback for diagnostics.">
      <option name="closed" value="true" />
      <created>1728541505701</created>
      <option name="number" value="00001" />
      <option name="presentableId" value="LOCAL-00001" />
      <option name="project" value="LOCAL" />
      <updated>1728541505701</updated>
    </task>
    <task id="LOCAL-00002" summary="feat: implement category and user query logic with tests&#10;&#10;- Added logic to query subcategories and users based on parent_id.&#10;- Return 404 when no subcategories or users are found.&#10;- Added unit tests for querying subcategories, users, and empty categories.">
      <option name="closed" value="true" />
      <created>1728548846038</created>
      <option name="number" value="00002" />
      <option name="presentableId" value="LOCAL-00002" />
      <option name="project" value="LOCAL" />
      <updated>1728548846038</updated>
    </task>
    <task id="LOCAL-00003" summary="feat: implement encryption and decryption with test&#10;&#10;- Added encrypt_data and decrypt_data functions using Fernet cipher in `encryption.py`&#10;- Implemented unit tests to verify encryption and decryption&#10;- Added test case to handle invalid encrypted data and raise appropriate exception">
      <option name="closed" value="true" />
      <created>1728549707013</created>
      <option name="number" value="00003" />
      <option name="presentableId" value="LOCAL-00003" />
      <option name="project" value="LOCAL" />
      <updated>1728549707013</updated>
    </task>
    <task id="LOCAL-00004" summary="feat: add signature upload API and corresponding tests&#10;&#10;- Implemented `upload_signature` function in `sign_upload.py` to handle signature uploads and mark users as signed in.&#10;- Added unit tests to verify that signatures are successfully uploaded and users' signed-in status is updated.">
      <option name="closed" value="true" />
      <created>1728555379733</created>
      <option name="number" value="00004" />
      <option name="presentableId" value="LOCAL-00004" />
      <option name="project" value="LOCAL" />
      <updated>1728555379733</updated>
    </task>
    <option name="localTasksCounter" value="5" />
    <servers />
  </component>
  <component name="TypeScriptGeneratedFilesManager">
    <option name="version" value="3" />
  </component>
  <component name="VcsManagerConfiguration">
    <MESSAGE value="feat: initialize project with check-in API and error handling&#10;&#10;- Initialized Flask project structure with basic configuration (app, config, routes).&#10;- Added check-in API with POST request support.&#10;- Implemented error handling for client, server, and database errors with custom error codes.&#10;- Set up MongoDB connection using PyMongo.&#10;- Added unit tests with enhanced feedback for diagnostics." />
    <MESSAGE value="feat: implement category and user query logic with tests&#10;&#10;- Added logic to query subcategories and users based on parent_id.&#10;- Return 404 when no subcategories or users are found.&#10;- Added unit tests for querying subcategories, users, and empty categories." />
    <MESSAGE value="feat: implement encryption and decryption with test&#10;&#10;- Added encrypt_data and decrypt_data functions using Fernet cipher in `encryption.py`&#10;- Implemented unit tests to verify encryption and decryption&#10;- Added test case to handle invalid encrypted data and raise appropriate exception" />
    <MESSAGE value="feat: add signature upload API and corresponding tests&#10;&#10;- Implemented `upload_signature` function in `sign_upload.py` to handle signature uploads and mark users as signed in.&#10;- Added unit tests to verify that signatures are successfully uploaded and users' signed-in status is updated." />
    <option name="LAST_COMMIT_MESSAGE" value="feat: add signature upload API and corresponding tests&#10;&#10;- Implemented `upload_signature` function in `sign_upload.py` to handle signature uploads and mark users as signed in.&#10;- Added unit tests to verify that signatures are successfully uploaded and users' signed-in status is updated." />
  </component>
  <component name="com.intellij.coverage.CoverageDataManagerImpl">
    <SUITE FILE_PATH="coverage/Counterspell_Staff_Server$sign_upload.coverage" NAME="sign_upload Coverage Results" MODIFIED="1728553746631" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="false" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="$PROJECT_DIR$/app/routes" />
    <SUITE FILE_PATH="coverage/Counterspell_Staff_Server$checkin.coverage" NAME="checkin Coverage Results" MODIFIED="1728553473548" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="false" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="$PROJECT_DIR$/app/routes" />
    <SUITE FILE_PATH="coverage/Counterspell_Staff_Server$.coverage" NAME=" Coverage Results" MODIFIED="1728556297886" SOURCE_PROVIDER="com.intellij.coverage.DefaultCoverageFileProvider" RUNNER="coverage.py" COVERAGE_BY_TEST_ENABLED="false" COVERAGE_TRACING_ENABLED="false" WORKING_DIRECTORY="$PROJECT_DIR$/tests/app/routes" />
  </component>
</project>